name: Publish Release

on:
  push:
    tags:
      - 'v[0-9]+.[0-9]+.[0-9]+*'

jobs:
  release:
    name: Release
    runs-on: ubuntu-latest
    timeout-minutes: 15

    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - name: Use Node.js 18.x
        uses: actions/setup-node@v4
        with:
          node-version: 18.x
      - name: Check release is desired
        id: do-publish
        run: |
          if [ -z "${{ secrets.NPM_TOKEN }}" ]; then
            echo "No Token"
          else

            PUBLISHED_VERSION=$(yarn npm info --json . | jq -c '.version' -r)
            THIS_VERSION=$(node -p "require('./package.json').version")
            # Simple bash helper to comapre version numbers
            verlte() {
              [  "$1" = "`echo -e "$1\n$2" | sort -V | head -n1`" ]
            }
            verlt() {
              [ "$1" = "$2" ] && return 1 || verlte $1 $2
            }
            if verlt $PUBLISHED_VERSION $THIS_VERSION
            then
              echo "Publishing latest"
              echo "tag=latest" >> $GITHUB_OUTPUT
            else
              echo "Publishing hotfix"
              echo "tag=hotfix" >> $GITHUB_OUTPUT
            fi

          fi
      - name: Prepare build
        if: ${{ steps.do-publish.outputs.tag }}
        run: |
          corepack enable
          yarn install
          yarn build
        env:
          CI: true
      - name: Publish to NPM
        if: ${{ steps.do-publish.outputs.tag }}
        run: |
          yarn config set npmAuthToken $NPM_AUTH_TOKEN

          yarn workspaces foreach --all -pt --exclude elgato-stream-deck-packages npm publish --access=public --tag ${{ steps.do-publish.outputs.tag }}
        env:
          NPM_AUTH_TOKEN: ${{ secrets.NPM_TOKEN }}
          CI: true
